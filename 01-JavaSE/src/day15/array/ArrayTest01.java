package day15.array;
/*
	Array:
		1.Java语言中的数组是一种引用数据类型，不属于基本数据类型，数组的父类是Object
		2.数组实际上是一个容器，可以同时容纳多个元素。（数组是一个数据的集合）
		数组：字面上是“一组数据”
		3.数组当中可以存放基本数据类型，也可以存放引用数据类型。
		4.数组因为是引用数据类型，所以数组对象存放在堆内存中
		5.数组当中如果存储的是“java对象”的话，实际上存储的是对象的“引用（内存地址）”
		6.数组一旦创建，在java中规定，长度不变。
		7.数组的分类：一维数组（使用较多）、二维数组、多维数组
		8.所有的数组都有length属性
		9.同一个数组中的数据类型相同
		10.数组在内存方法存储的时候，数组中的元素内存地址是连续的。
			 内存地址连续这是数组存储元素的特点。
			 数组实际上是一种简单的数据结构
		11.数组中首元素的内存地址作为整个数组的内存地址
		12.数组中每一个元素都是有下标的，下标从0开始，最后一个下标是length-1
			 下标非常重要，数据的存储都是通过下标的方式进行访问。
		12.数组这种数据结构的优点和缺点是：
			 优点：①每一个元素的内存地址在内存空间是连续的。
			      ②每一个元素类型相同，所以占用的空间大小是一样的。
			      ③知道一个元素内存地址，直到每一个元素占用空间的大小，又知道下标，
			      	所以通过一个数学表达式就可以计算出某个下标上元素的内存地址，
			      	直接通过内存地址定位元素，所以数组的效率是最高的。
			      数组的查询效率与数组中的元素个数没有关系【通过数学的方式计算出来的】
			 缺点：①由于内存中的每一个元素是连续的，所以在数组上（除开最后一个元素）随机删除或增加元素效率低。
			 		  ②数组不能存储大数据量：因为很难在内存空间上找到一块特别大的连续的内存空间。
		13.初始化一维数组：
			 静态初始化和动态初始化
			 静态：int[] array = {1, 2, 2, 3};
			 动态：int[] array = new int[4]; // 初始化一个长度为4的数组，每一个元素的默认值是0
					  String[] names = new String[5] // 初始化长度为5的String类型的数组，每个元素的默认值是null。

 */
public class ArrayTest01 {
	public static void main(String[] args) {
		int[] arr1 = {1, 2, 3};
		System.out.println(arr1.length);
		System.out.println(arr1[arr1.length - 1]);

		arr1[arr1.length - 1] = 0;
		System.out.println(arr1[arr1.length - 1]);

		arr1[3] = 5; //ArrayIndexOutOfBoundsException 数组下标越界异常
		System.out.println(arr1[3]);
	}
}
